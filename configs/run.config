params.pathtobriocher       = "${projectDir}/bin/briocheR_0.1.2.tar.gz"
def parameters_expected     = ['markercharacter','maximumhits', 'pident','coverage','chromstoexclude','notifications','emailaddress',
  'mode','blastdb', 'resultsdir', 'blastoutformat','minmismatches','extendablebps','genomefasta','genomename',
  'targetdesign','probename','istarget3primeend','keepduplicates','pathtobriocher','bascaccount','buildblastdbonly'] as Set

import java.time.*
Date now = new Date()
timestamp=now.format("yyyyMMdd; HH:mm:ss")
timestamp2=now.format("yyyyMMdd")
def user= System.getenv()['LOGNAME'];
def userName = "pinky -l ${user}".execute().text.split("life:  ")[1].split("Directory")[0].trim()


//Get user details
def userEmail=params.emailaddress
params.user=userName
def notify=params.notifications

if(userEmail==""||userEmail==null){
        notify=false
}

//Get git version of brioche
def gitversion="git --git-dir=${projectDir}/.git rev-parse HEAD".execute().text.trim()
params.gitver=gitversion
params.briochever="git --git-dir=${projectDir}/.git tag".execute().text.trim()
System.out.println("Git version "+params.briochever)

/*
 * Define log to print at the start of brioche
 */
def baseDirectory = "$baseDir"
def colWidth = 20
logtoprint=String.format("\n%-${colWidth}s %-${colWidth}s\n", "Parameter", "Value", )
logtoprint=logtoprint+String.format("%-${colWidth}s %-${colWidth}s\n", "-"*colWidth, "-"*colWidth)
//Create directory
import java.io.File
System.out.println "${params.resultsdir}"
if("${params.resultsdir}"==""||"${params.resultsdir}"=="[:]")
{
      outputdir="${launchDir}/brioche-results/"
}
else
{
      outputdir ="${params.resultsdir}/brioche-results/"
}

// Create the directory
new File(outputdir).mkdirs()
params.resultsdirectory="${outputdir}"
System.out.println("The path is ${params.resultsdirectory}")
params.each { key, value ->
  if(key!="resultsdir")
    logtoprint=logtoprint+String.format("%-${colWidth}s %-${colWidth}s\n","$key",": $value")
}
params.loginfo=logtoprint

notification {
  enabled = notify
  to = userEmail
  subject="Brioche output summary"
  template = "${projectDir}/templates/notification.html"
}

System.out.println(params.resultsdirectory)
//Start saving logbook
params.start=timestamp2
params.logbookpath=outputdir.toString()+"/LOGBOOK_"+timestamp2+".txt"
def logbook=new File("${params.logbookpath}")

//Set logbook output
def rst="brioche Logbook\n"
    rst+="===============================================================\n"
    rst+="Start date: "+timestamp+"\n"
    rst+="Performed by: ${params.user}\n"
    rst+="brioche version: ${params.briochever}\n"
    rst+="brioche build: ${gitversion}\n"
    rst+="Work directory: ${launchDir}\n"
    rst+="Results directory: ${params.resultsdir}\n"

def rst2="---------------------------------------------------------------------------\n"
    rst2+="                 Parameter details used in the analysis\n"
    rst2+="---------------------------------------------------------------------------\n"
    rst2+=logtoprint+"\n\n"
logbook.write(rst)

workflow.onComplete={
    def finalout="Nextflow version: ${nextflow.version}\n\n"
      finalout+="Command used: ${workflow.commandLine}\n"
      finalout+="\nPipeline completed at: ${workflow.complete.format('yyyyMMdd-HH-mm-ss')}\n"
      finalout+="\nExecution status: ${ workflow.success ? 'OK' : 'failed' }\n"
      finalout+=rst2+"\n"
    logbook.append(finalout)
}

workflow.onError={
    logbook.append("Nextflow version: ${nextflow.version}\n\n")
    logbook.append("Command used: ${workflow.commandLine}")
    logbook.append("\nbrioche stopped with the following message: ${workflow.errorMessage}\n")
    logbook.append(rst2+"\n")
}
params.blastoutformat = "'6 qaccver saccver pident qlen length mismatch gapopen qstart qend sstart send evalue bitscore btop qseq sseq sstrand'" //vector of format specifiers from the supported format specifiers for 6,7 and 10 in blastn's 'outfmt' paramete
//Include reporting metrics
tracedir=outputdir.toString()+"/Reports/"
timeline {
    enabled = true
    file = tracedir+"/"+timestamp.replaceAll("; |:","-")+"_timeline.html"
}

report {
    enabled = true
    file = tracedir+"/"+timestamp.replaceAll("; |:","-")+"_report.html"
}

dag {
     enabled = true
     file = tracedir+"/"+timestamp2+"_dag.html"
     overwrite= true
}