if (params.help) {
  params.notifications=false
  def helpout=""
  new File("${projectDir}/params.config").eachLine { line ->
    aa="|--"+line.trim().replaceAll("params.*|\\{|\\}","").replaceAll("=.*//","\t").replaceAll("//","")  // Process each line as read
    if(aa=="|--")
          aa=aa.replaceAll("--","")
    helpout+="\n"+aa.replaceAll("--=","=")
  }

  help = """
  main.nf: Brioche is a bioinformatics pipeline for mapping markers to a given reference genome

  Usage: It's recommended that you use the ${projectDir}/params.config file to add all parameters and then run brioche as;

    nextflow run ${projectDir}/main.nf --mode [test|prod] --paramfile 'Absolute path to param config file' [other Nextflow arguments]

  but you can also add these on the command line as;

    nextflow run ${projectDir}/main.nf --mode [test|prod] --param1 --param2 ... --paramN [other Nextflow arguments]

  ${helpout}

  |============================other Nextflow arguments commonly used with brioche===========================================================================================
  |-w                         Directory where intermediate result files are stored - this is very important as the intermediary files produced by brioche can fill up really quickly
  |-resume                    This allows nextflow to resume from a previous execution
  |-profile                   Choose a configuration profile, brioche comes with 2 profiles; 'standard' allows you to run on the local host and 'slurm' allows you to use the slurm executor
  |for more options; see nextflow run -h """.stripMargin()
  // Print the help with the stripped margin and exit
  System.out.println(help)
  System.exit(0)
}