#' @title Check input data
#' @description This function is used to process and check for input details
#' @author David Chisanga
#' @param blast.file path to the blast output file
#' @keywords blast, alignment
#'
#' @return Returns a named list
#' @noRd
getTarget <- function(targets) {
  #Check if targets file has been provided
  #Table with a list of targets with the following column names ID,Target.chromosome,TargetPosition,TargetSNP
  if (file.exists(targets))
  {
    if (grepl("RDS$", targets, ignore.case = T))
      targets <- readRDS(targets)
    else
    {
      targets <- read.table(
        targets,
        stringsAsFactors = F,
        header = F,
        strip.white = T,
        fill = T
      )
      if ("ID" %in% targets[1,])
      {
        colnames(targets) <- targets[1,]
        targets <- targets[-1,]
      }
      else
      {
        colnames(targets) <-
          c("ID", "Target.Chr", "Target.bp", "Targeted.SNP")
      }
    }
    if (nrow(targets) > 0)
    {
      target.provided = T
    }
    else{
      stop("Targets file provided has null content, check file and try again")
    }
  } else {
    stop(paste0("Targets file was not found at ", targets))
  }
  targets <- targets[!duplicated(targets), ]
  return(targets)
}


#' @title Check input data
#' @description This function is used to process and check for input details
#' @author David Chisanga
#' @param blast.data Data frame, large data frame of the output from a blast run
#' @param target data frame or null value, manifest data with annotation information
#' @param target.provided logical value to indicate if target file is provided
#' @keywords blast, alignment
#'
#' @return Returns a named list
#'
#' @noRd
processXTBlast <-
  function(blast.data,
           target,
           istarget3primeend,
           extendable.site.bps,
           min.matchbp) {
    #Include hybridisation information

    blast.data$Hybridize <-
      ifelse(
        as.numeric(blast.data$qend) == as.numeric(blast.data$qlen) &
          as.numeric(blast.data$length) >= min.matchbp,
        "Yes",
        "No"
      )

    #Get the number of matching bases from the 3 prime end of the probe if target is provided
    if (!is.null(target))
    {
      blast.data$Identical_nts_from_3prime_end <-
        gsub(".*_",
             "",
             gsub("([A-Z][A-Z])|([A-Z]-)|(-[A-Z])", "_", blast.data$btop))


      #Check if there are no mismatches in at least 3bps from the 3 prime end of the probe
      blast.data$No_missmatch3bp <- unlist(sapply(as.numeric(
        as.numeric(blast.data$Identical_nts_from_3prime_end)
      ), function(x)
        if (x >= extendable.site.bps)
          return("Yes")
      else
        return(".")),
      use.names = F)

      #If the number of matching bps from the 3prime end is  more
      blast.data$ExtendableSite <-
        unlist(sapply(blast.data$Identical_nts_from_3prime_end, function(x) {
          if (as.numeric(x) >= extendable.site.bps)
            return("Yes")
          else
            return(".")
        }),
        use.names = F)
    }
    return(blast.data)
  }

#' @title Function to check if a mapping is extendable
#' @author David Chisanga
#' @details This function is used to check if a mapping is extendable
#' @param istarget3primend Logic to check if a chip used is 3 prime-end
#' @param extandable.site.bps Integer with the number of allowed base pairs
#' @param min.matchbp
#' @param btop 
#' @noRd 
checkIfExtendable <-
  function(istarget3primeend,
           extendable.site.bps,
           min.matchbp,
           target.bp,
           marker.char,
           btop){
    #Include hybridisation information
    #Get the number of matching bases from the 3 prime end of the probe if target is provided
    identical_nts_from_target<-gsub(".*_","",gsub("([A-Z][A-Z])|([A-Z]-)|(-[A-Z])", "_",strsplit(btop,marker.char)[[1]][1]))
    return(identical_nts_from_target)
}


#'@title Check hybridisation status
#'@description Function used to check the hybridisation status of a probe sequence
#' @param marker.data Row list of marker data
#' @param variants list of variants and their positions
#' @param min.coverage minimum coverage as percentage
#' @param min.pident minimum percentage identity
#' @param istarget3primeend Boolean value showing whether the target marker is on the 3 prime end
#' @param min.matchbp Integer showing the number of expected correctly matched base pairs
#' @author David Chisanga

checkHybridisation <-
  function(marker.data,
           variants,
           varposition,
           istarget3primeend = F,
           min.coverage,
           min.pident,
           min.matchbp,
           marker.char)
{
    # Check if hybridized
    hybridize <- 'No'
    if (!istarget3primeend) {
      #Check coverage
      if(marker.data[["Coverage"]]>= min.coverage & marker.data[["pident"]]>=min.pident)
      {
        #Check if there is a gap before and after marker position
        var_type <- variants$type
        variants <- variants$vars
        marker.index<-grep(marker.char,variants)
        if(length(marker.index)>0)
        {
          b4var<-var_type[marker.index-1]
          aftervar<-var_type[marker.index+1]
          if(!is.na(b4var) & !is.na(aftervar))
          {
            if(b4var=="M" & aftervar == "M")
            {
              hybridize<-"Yes"
            }
          }
          else if(!is.na(b4var) & !is.na(aftervar))
            hybridize<-"Maybe"
        }
      }
    }
    else
    {
      if (marker.data[["qend"]] == marker.data[["qlen"]] &
          marker.data[["length"]] >= min.matchbp)
      {
        hybridize <- "Yes"
      }
    }
    return(hybridize)
}

#' @title Get Variants from BLAST BTOP
#' @author David Chisanga
#' @description Function to separate variants within the btop string outpt by blast
#' @param btop String btop value from blast
#' @examples
#' getVariantsFromBTOP("4A-40-AGC25TA5")
#' @keywords btop,variants,blast
#' @export
getVariantsFromBTOP <- function(btop) {
  prevchar <- NA
  i <- 1
  #replace numbers of matching bases with M
  btop <- gsub("[0-9]+", "M", btop)
  bpletters <- LETTERS[LETTERS != "M"]
  variants <- NULL
  for (char in strsplit(as.character(btop), "")[[1]]) {
    if (char == "M")
    {
      variants[i] <- char
      i <- i + 1
    }
    else if (is.na(prevchar)) {
      prevchar <- char
    }
    else{
      if (prevchar %in% bpletters & char %in% bpletters) {
        variants[i] <- paste0(char, ">", prevchar)
        i <- i + 1
        prevchar <- NA
      } else if ((prevchar %in% bpletters &
                  char == "-") || (char %in% bpletters & prevchar == "-")) {
        variants[i] <- paste0(prevchar, char)
        i <- i + 1
        prevchar <- NA
      }
      else {
        prevchar <- char
      }
    }
  }
  variant.type <- variants
  variant.type[grepl(">", variants)] <- "SNP"
  variant.type[grepl("-", variants)] <- "G"
  return(list(vars = variants, type = variant.type))
}


#' @title Function to get variant positions from blast btop
#' @author David Chisanga
#' @description The function is used to obtain the positions of variants
#' from the btop output from blast
#' @param btop String btop value
#' @keywords btop,blast,variant,position
#' @examples
#' getPositionsFromBTOP("4A-40-AGC25TA5")
#' @export
getPositionsFromBTOP <- function(btop)
{
  #get variant positions
  patt <- "_1_"
  positions2print <- ""
  tryCatch({
    # positions<-gsub("(_)+","_",gsub(
    #     "(?<!([A-Z][A-Z][A-Z]))(-[A-Z])|([A-Z]-)(?!=([A-Z][A-Z][A-Z]))",
    #     patt,
    #     gsub(
    #       "(?<=-)([A-Z][A-Z])|([A-Z][A-Z])(?=-)",
    #       patt,
    #       gsub("[A-Za-z][A-Za-z]",patt,gsub("(?<!-)([A-Z][A-Z])(?!-)",patt,btop, perl = T),perl = T),
    #       perl = T
    #     ),
    #     perl = T
    #   ))
    #
    # positions=strsplit(positions,"_")[[1]]
    # positions<-positions[positions!=""]
    # positions2print<<-positions
    prevchar <- NA
    positions <- NULL
    nums <- as.character(0:9)
    for (char in strsplit(as.character(btop), "")[[1]])
    {
      if (is.na(prevchar))
      {
        if (char %in% nums)
        {
          positions <- paste0(positions, char)
        }
        else{
          prevchar <- char
        }
      }
      else if ((prevchar %in% LETTERS &
                char %in% LETTERS) ||
               (prevchar == "-" &
                char %in% LETTERS) || (prevchar %in% LETTERS & char == "-"))
      {
        positions <- paste0(positions, patt)
        prevchar <- NA
      }
      else if (prevchar == "-" & char == "-")
      {
        positions <- paste0(positions, patt)
        prevchar <- NA
      }
      else{
        stop(paste0("No match found for '", prevchar, "' and '", char, "'"))
      }
    }

    positions <- strsplit(gsub("(_)+", "_", positions), "_")[[1]]

    if (length(positions) > 0)
      return(cumsum(as.numeric(positions)))
    else
    {
      return(".")
    }

  },
  error = function(e) {
    stop(e)
  },
  warning = function(w) {
    stop(w)
  },
  finally = function(f) {
    print(f)
  })
}



#' @title Process alignment results from blast
#' @description This function is used to process and format the blast output
#' @author David Chisanga
#' @param blast.file path to the blast output file
#' @param min.matchbp minimum length of HSP to be considered fully Hybridize
#' @param target table with target annotation
#' @param outfmt vector of format specifiers from the supported format specifiers for 6,7 and 10 in blastn's 'outfmt' parameter
#' @param path.2save.coords path where SNP coordinates to get base in reference genome using samtools are to be saved
#' @param extendable.site.bps number of matching base pairs from the 3 prime end for a probe to be considered as extendable
#' @param istarget3primeend logical value showing if target is on the 3' prime end
#' @param num.threads integer value of the number of threads passed to reading the data file
#' @param keep.duplicates logical value, whether to retain lines with multiple hits
#' @keywords blast, alignment
#' @export
#'
#' @return Returns a data frame of processed blast results
#'
#'
processBlastResults <- function(blast.file,
                                min.matchbp = 40,
                                path.2save.coords = "SNPcoordinates",
                                extendable.site.bps = 3,
                                targets,
                                outfmt = c(
                                  "qaccver",
                                  "saccver",
                                  "pident",
                                  "qlen",
                                  "length",
                                  "mismatch",
                                  "gapopen",
                                  "qstart",
                                  "qend",
                                  "sstart",
                                  "send",
                                  "evalue",
                                  "bitscore",
                                  "btop",
                                  "qseq",
                                  "sseq",
                                  "sstrand"
                                ),
                                istarget3primeend,
                                marker.char = "N",
                                min.coverage = 95,
                                min.pident = 95)
{
  stopifnot(file.exists(blast.file), file.exists(targets))
  if (missing(istarget3primeend))
    stop("argument 'istarget3primeend' is missing!")
  if (toupper(as.character(istarget3primeend)) == "TRUE")
  {
    istarget3primeend = T
  }
  else
  {
    istarget3primeend = F
  }

    count.table <-
      tempfile(paste0("table_", basename(blast.file)), fileext = ".txt")
    system(paste0("wc -l ", blast.file, ">", count.table))
    targets <- getTarget(targets)
    #Read data from data.table
    data <-  data.table::fread(
      input = blast.file,
      strip.white = T,
      fill = T,
      sep = "\t",
      showProgress = T
    )

    #Rename the columns to use the blast output format used
    colnames(data) <- outfmt

    #Compute the coverage using the length of the matched reference sequence
    #againsst the length of the probe sequence
    data$Coverage <-
      with(data, 100 * as.numeric(length) / as.numeric(qlen))
    #Add target information
    data <-
      cbind(data, targets[match(data$qaccver, targets$ID),])
    #Split SNP into clusters
    data$ClusterA_NT <-
      gsub(
        "\\[|\\]|/[ACTG]",
        "",
        data$Target.base,
        perl = T,
        ignore.case = T
      )
    data$ClusterB_NT <-
      gsub(
        "[ACTG]/|\\[|\\]",
        "",
        data$Target.base,
        perl = T,
        ignore.case = T
      )

    # Calculate the expected SNP position on the rereference genome
    data$SNPpos <- as.numeric(apply(data, 1, function(x) {
      targetbp <-
        ifelse(istarget3primeend, 1, as.numeric(x[["Target.bp"]]) - as.numeric(x[["qstart"]]))
      pos = as.numeric(x[["sstart"]]) + targetbp - 1
      if (x[["sstrand"]] == "minus")
        pos <- (as.numeric(x[["sstart"]]) - targetbp)
      return(pos)
    }))

    cat("Finished calculating SNP position\n",
        file = "logger.log",
        append = T)

    # Initialize variables for storing results
    SNPorGap <- character(nrow(data))#Holds info on variant type
    SNPorGap_pos <-
      character(nrow(data)) #Holds the position of variant
    SNPorGAPpos_Ref <-
      character(nrow(data)) #Reference base observed
    Variant <- character(nrow(data)) #Actual variant
    SNPpos_all <- character(nrow(data)) #
    #variable to hold number of mismatches near var position
    Identical_bps_from_target <- character(nrow(data))
    for (i in 1:nrow(data)) {
      var_position <- getPositionsFromBTOP(data$btop[i])
      variantinfo <- getVariantsFromBTOP(data$btop[i])
      var_type <- variantinfo$type
      variants <- variantinfo$vars
      var_position <- var_position[!grepl("M", var_type)]
      var_type <- var_type[!grepl("M", var_type)]
      variants <- variants[!grepl("M", variants)]
      var_type <- paste0(var_type, collapse = ";")
      SNPorGAPpos_Ref[i] <- "."
      SNPpos_all[i] <- "."
      if (!(istarget3primeend))
        data$SNPpos[i] <- "."
      if (length(var_position) > 0) {
        if (class(var_position) != "character")
        {
          posN <- sapply(var_position, function(y)
            ifelse(
              data$sstrand[i] == "plus",
              as.numeric(data$sstart[i]) + as.numeric(y),
              as.numeric(data$sstart[i]) - as.numeric(y)
            ), simplify = T, USE.NAMES = F)
          targetpos <- posN[grepl(marker.char, variants)]
          if (length(targetpos) > 0)
            data$SNPpos[i] <- targetpos
          SNPorGAPpos_Ref[i] <- paste0(sapply(posN, function(xx)
          {
            if (is.na(xx))
              return(".")
            paste0(data$saccver[i], ":", xx, "-", xx)
          }, USE.NAMES = F, simplify = T),
          collapse = ";")
          if (!(istarget3primeend))
            SNPpos_all[i] <- paste0(posN, collapse = ";")
        }
      }

      if (var_type == "") {
        var_type <- "."
      }
      SNPorGap[i] <- paste0(var_type, collapse = ";")
      SNPorGap_pos[i] <- paste0(var_position, collapse = ";")
      Variant[i] <- paste0(variants, collapse = ";")
      Identical_bps_from_target[i]<-gsub(".*_","",
      gsub("([A-Z][A-Z])|([A-Z]-)|(-[A-Z])", "_",
      strsplit(data$btop[i],marker.char)[[1]][1]))
    }

    # Add the processed columns to the data data frame
    data$SNPorGap <- SNPorGap
    data$SNPorGap_pos <- SNPorGap_pos
    data$SNPorGAPpos_Ref <- SNPorGAPpos_Ref
    data$Variant <- Variant
    
    data$SNP.Refpos <-
      with(data, paste0(saccver, ":", SNPpos, "-", SNPpos))
    if (istarget3primeend)
    {
      data$Identical_bps_from_target <- Identical_bps_from_target
      #If the number of matching bps from the 3prime end is  more
      data$ExtendableSite <-
      ifelse(
        as.numeric(data$Identical_bps_from_target) >= extendable.site.bps,
        "Yes",
        ".")

      data$Hybridized <-
      ifelse(
        (abs(as.numeric(data$qend)-as.numeric(data$qlen))==1||as.numeric(data$qend)==as.numeric(data$qlen)) &
          as.numeric(data$length) >= min.matchbp,
        "Yes",
        "."
      )
    }

    library(dplyr)
    #data<-checkHybridisation(data,istarget3primeend,min.matchbp)
    cat("Filter combined blast file\n",
        file = "logger.log",
        append = T)
    data <- data %>%
      filter(SNP.Refpos != "." & !is.na(SNPpos)) %>%
      arrange(Coverage, pident, qaccver, decreasing = TRUE)
    if (!file.exists(path.2save.coords))
      dir.create(path.2save.coords, recursive = T)
    data$Target.Chr <- NULL
    saveRDS(data,
            paste0(path.2save.coords, "/processed_blast_results.RDS"))
    write.table(
      subset(data, SNP.Refpos != paste0(saccver, ":.-."))$SNP.Refpos,
      file = paste0(path.2save.coords,
                    "/samtools_marker_positions.txt"),
      quote = F,
      sep = "\t",
      col.names = F,
      row.names = F
    )
}
