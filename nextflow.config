manifest {
    name  = "brioche"
    description = 'brioche is a pipeline for mapping markers to the reference genome'
    nextflowVersion = '>= 20.07.0'
    mainScript = "main.nf"
    author = "[David Chisanga, Gabriel Keeble-Gagnere, Kerrie L Forrest]"
    homePage = "https://github.com/plantinformatics/brioche"
}
import java.lang.System

//Check if conda is installed
def isCondaInstalled() {
  try {
    def process = "conda --version".execute()
    process.waitFor()
    return process.exitValue() == 0
  } catch (IOException e) {
    return false
  }
}

if (isCondaInstalled()) {
  System.out.println("Conda is installed.")
} else {
  System.out.println("Conda is not installed. brioche uses conda as the package manager")
  System.exit(1)
}

def javaversion="${System.getProperty("java.version")}".toString()

if(Double.parseDouble(javaversion.replaceAll(/\.(.*?)\.(.*)/, ''))<17)
{
  System.out.println "Current Java version:"+javaversion
}

//// Get all environment variables as a map
def envVars = System.getenv()

//Set environment variables to be used by Nextflow
env {
  PICARD="${projectDir}/bin/picard.jar"
  R_MAX_VSIZE=2621440
}

process {
  cache = 'lenient'
  scratch = false
}

if (params.isEmpty()) {
    System.out.println("Warning: No parameter file or parameters Specified!")
    params.help=true
}
else
{
   params.help=false
}

//Include help file to check if parameters have been passed
includeConfig "${projectDir}/configs/help.config"

if(params.containsKey('paramfile') && new File(params.paramfile).exists())
{
    includeConfig "${params.paramfile}"
}
else if(params.mode.toString().toLowerCase()=="test")
{
    System.out.println("brioche is running in test mode with default configurations")
    //Include default parameters
    includeConfig "${projectDir}/params.config"
}
else{
    def filt=""
    params.each{key,value->
        filt=filt+""+key+"\\|"
    }
    filt=filt.substring(0,filt.length()-2)
    def command = ["sh","-c","grep -iv '${filt}' ${projectDir}/params.config > ${launchDir}/params.config"]
    def process = command.execute()
    process.waitFor()
    includeConfig "${launchDir}/params.config"
}

profiles {
    standard{
      process {
            executor = 'local'
            cpus=4
         }
    }
    slurm {
      executor {
        name='slurm'
        queueSize = params.queuesize
        jobName={"brioche-$task.process($task.tag)"}
      }
      process{
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
        //default resources allocated to individual processes
        queue = { task.attempt>1 ? "${params.longqueue}":"${params.shortqueue}" }
        cpus = 2
        memory = { 50.GB * task.attempt }
        time = { 6.h * task.attempt }
        withLabel:'split'{
          time = { 6.h * task.attempt }
        }
        withLabel: 'large' {
          queue=params.longqueue
          time = { 6.h * task.attempt }
          cpus=20
          memory={ 300.GB * task.attempt }
        }
        withLabel: 'merge' {
          queue=params.longqueue
          time = { 48.h * task.attempt }
          cpus=20
          memory={ 400.GB * task.attempt }
        }
        clusterOptions = "--account ${params.hpcaccount}"
      }
    }
}
//Enable conda environments
conda {
  conda="${projectDir}/conda_environment.yml"
  enabled=true
  cacheDir=envVars["HOME"]+"/.conda/envs/"
  createTimeout='60 min'
}
process.conda="${projectDir}/conda_environment.yml"
includeConfig "${projectDir}/configs/run.config"



